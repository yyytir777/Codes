Package Control Messages
========================


Origami
-------

  Origami
     the art of folding paper
  
  https://github.com/SublimeText/Origami
  
  Origami is a new way of thinking about panes in Sublime Text:
  you tell Sublime Text where you want a new pane, and it makes one for you.
  It works seamlessly alongside the built-in layout commands.
  
  All commands are available under the View>Origami menu, as well as in the
  command palette (search for Origami).
  
  Keybindings also exist for most commands. Origami shortcuts start by pressing
  and releasing ctrl+k (or cmd+k), followed by a second shortcut, like this:
   * ctrl/cmd+k, then an arrow: move focus to the pane in that direction
   * ctrl/cmd+k, then shift+arrow: move the current file to the destination
   * ctrl/cmd+k, then alt/option+arrow: clone the current file to the destination
   * ctrl/cmd+k, then ctrl/cmd+arrow: create an adjacent pane
   * ctrl/cmd+k, then ctrl/cmd+shift+arrow: destroy an adjacent pane

LSP
---

                    Thanks for trying out the LSP package!
                    ======================================
  
  
  This package is a "client" implementation of the "language server protocol".
  This is a protocol that defines how (language) servers and clients (editors)
  should talk to each other. It enables high-quality code-complete,
  signature-help, goto-def, accurate find-references, and more.
  
  This package doesn't actually contain any language server by itself. It
  provides only the glue code to attach language servers to Sublime Text.
  
  Exactly which concepts from LSP should map to which concepts from Sublime
  Text and vice versa is an ongoing research problem. We're certainly still
  figuring things out!
  
  To get up and running for your favorite language, open the documentation at
  
      https://lsp.sublimetext.io


LSP-clangd
----------

  ## Installation
  - Install LSP and LSP-clangd from Package Control
  - Install clangd using your package manager or let this plugin install clangd for you
  
  ## Usage
  
  By default, clangd will assume your code is built as clang some_file.cc, and youâ€™ll probably get errors about missing #included files, etc. 
  
  For complex projects clangd needs to know your build flags. This can be done using a `compile_commands.json` or `compile_flags.txt` file.
  
  See https://clangd.llvm.org/installation#project-setup


  GitHub Theme
------------

  ## GitHub Theme for Sublime Text! ðŸŽ‰
  
  ### Activate the theme
  
  **You can active this theme from:**
  
  1. Command Palette `Tools â†’ Command Palette` or `CMD/CTRL` + `SHIFT` + `P`
  2. Typing `UI: Select Theme` next find for `GitHub Theme` and press `ENTER`
  3. Same process for scheme go to the Command Palette.
  4. Typing `UI: Select Color Scheme` choose you favorite scheme and press `ENTER`
  
  Manually you can go to (**Preferences â†’ Settings - User**) and paste the following code:
  
  ```json
  {
      "color_scheme": "Packages/GitHub Theme/schemes/GitHub Light.sublime-color-scheme",
      "theme": "GitHub Adaptive.sublime-theme"
  }
  ```

